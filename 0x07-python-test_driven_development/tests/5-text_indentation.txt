>>> text_module = __import__("5-text_indentation")
>>> no_imports = __import__('testing_util').no_imports
>>> no_imports(text_module, ['text_indentation'])
True

>>> text_indentation = text_module.text_indentation

=======================================================================
Traceback (most recent call last):
TypeError: text must be a string
=======================================================================



>>> text_indentation(1)
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation((1))
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation(None)
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation([])
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation({})
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation({'a': 1})
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation((1,))
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation([[], [], []])
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation([[6, 6, 6], [6, 6, 6], [6, 6, 6]])
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation([[6], [6, 6], [6, 6, 6]])
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation([[6], [6, 6], [6]])
Traceback (most recent call last):
TypeError: text must be a string

==========================================
Output tests
==========================================

>>> text_indentation('Kevan.Victor.Madison')
Kevan.
<BLANKLINE>
Victor.
<BLANKLINE>
Madison

>>> text_indentation(' .hello you? there ')
.
<BLANKLINE>
hello you?
<BLANKLINE>
there
